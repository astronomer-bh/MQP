"square"
		if (self.curtime < self.start +10 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * 5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start + 13.2):
			self.desired[0] = Robot.SPEED * -5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start + 23.2):
			self.desired[0] = Robot.SPEED * 5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start + 26.4):
			self.desired[0] = Robot.SPEED * -5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start + 36.4):
			self.desired[0] = Robot.SPEED * 5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start + 39.6):
			self.desired[0] = Robot.SPEED * -5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start + 49.6):
			self.desired[0] = Robot.SPEED * 5
			self.desired[1] = Robot.SPEED * 5

"rotate twice both ways"
		if (self.curtime < self.start +2.5 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * 3
			self.desired[1] = Robot.SPEED * 3
		elif (self.curtime < self.start +5 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * -3
			self.desired[1] = Robot.SPEED * -3
		elif (self.curtime < self.start +5+6.40):
			self.desired[0] = Robot.SPEED * 5
			self.desired[1] = Robot.SPEED * -5
		elif (self.curtime < self.start +  5+6.40+5):
			self.desired[0] = Robot.SPEED * 0
			self.desired[1] = Robot.SPEED * 0
		elif (self.curtime < self.start +  5+6.40+5+6.40):
			self.desired[0] = Robot.SPEED * 5
			self.desired[1] = Robot.SPEED * -5
		elif (self.curtime < self.start +  5+6.40+5+6.40+5):
			self.desired[0] = Robot.SPEED * 0
			self.desired[1] = Robot.SPEED * 0
		elif (self.curtime < self.start +  5+6.40+5+6.40+5+6.40):
			self.desired[0] = Robot.SPEED * -5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start +  5+6.40+5+6.40+5+6.40+5):
			self.desired[0] = Robot.SPEED * 0
			self.desired[1] = Robot.SPEED * 0
		elif (self.curtime < self.start +  5+6.40+5+6.40+5+6.40+5+6.40):
			self.desired[0] = Robot.SPEED * -5
			self.desired[1] = Robot.SPEED * 5

"rotation speeds test" - slower = better
		if (self.curtime < self.start +2.5 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * 3
			self.desired[1] = Robot.SPEED * 3
		elif (self.curtime < self.start +5 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * -3
			self.desired[1] = Robot.SPEED * -3
		elif (self.curtime < self.start +5 +3):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * 0
			self.desired[1] = Robot.SPEED * 0
		elif (self.curtime < self.start +5+3+6.15):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * -3
			self.desired[1] = Robot.SPEED * 3
		elif (self.curtime < self.start +5+3+6.15+3):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * 0
			self.desired[1] = Robot.SPEED * 0
		elif (self.curtime < self.start +5+3+6.15+3+3.69 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * -5
			self.desired[1] = Robot.SPEED * 5
		elif (self.curtime < self.start +5+3+6.15+3+3.69+3 ):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * 0
			self.desired[1] = Robot.SPEED * 0
		elif (self.curtime < self.start +5+3+6.15+3+3.69+3+2.636):	#90degrees at 3.2 seconds for 5*10 speed
			self.desired[0] = Robot.SPEED * -7
			self.desired[1] = Robot.SPEED * 7

Kalman Filter Test - Straight Line - switch sign as needed - speed of "38" being used in tests
		if (self.curtime < self.start +90):
			self.desired[0] = Robot.SPEED * 1
			self.desired[1] = Robot.SPEED * 1
		else:
			self.desired[0] = 0
			self.desired[1] = 0

Kalman Filter Test - Right Angle Turn - same as above
		if (self.curtime < self.start +6.454):	#90degrees is 9.714/2 for 38, or 12.907/2 for what 38 seems to be doing :/
			self.desired[0] = Robot.SPEED * -1	#cw = -
			self.desired[1] = Robot.SPEED * 1	#ccw = -
		elif (self.curtime < self.start +6.454+90):
			self.desired[0] = Robot.SPEED * 1
			self.desired[1] = Robot.SPEED * 1
		else:
			self.desired[0] = 0
			self.desired[1] = 0

Kalman Filter Test - Theta Test - same as above
		if (self.curtime < self.start +12.907):  #180degrees is 9.714 for 38, or 12.907 for what 38 did yesterday
			self.desired[0] = Robot.SPEED * -1 #cw = -1
			self.desired[1] = Robot.SPEED * 1  #ccw = -1
		else:
			self.desired[0] = 0
			self.desired[1] = 0

Kalman Filter Test - all three - same as above
		if (self.curtime < self.start +90):
			self.desired[0] = Robot.SPEED * 1
			self.desired[1] = Robot.SPEED * 1
		elif (self.curtime < self.start +90+6.454):	#90degrees is 9.714/2 for 38, or 12.907/2 for what 38 seems to be doing :/
			self.desired[0] = Robot.SPEED * -1	#cw = -
			self.desired[1] = Robot.SPEED * 1	#ccw = -
		elif (self.curtime < self.start +90+6.454+90):
			self.desired[0] = Robot.SPEED * 1
			self.desired[1] = Robot.SPEED * 1
		else:
			self.desired[0] = 0
			self.desired[1] = 0
Battery before charge:
2270
2696

Battery after short charge
2516
2696
